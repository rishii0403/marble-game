import pygame
from queue import Queue

white = (255, 255, 255)
black = (0, 0, 0)
red = (255, 0, 0)
green = (0, 255, 0)
blue = (0, 0, 255)

n = 4
marbles = [(0, 1), (1, 0), (1, 2)]
ends = [(2, 3), (2, 1), (3, 2)]
holes = {(2, 3): 0, (2, 1): 1, (3, 2): 2}
walls = {(1, 1)}

# Define the size of the grid cells and the padding
cell_size = 50
padding = 5

# Initialize Pygame
pygame.init()

# Define the size of the window
window_size = (800, 600)

# Create the Pygame window
screen = pygame.display.set_mode(window_size)
pygame.display.set_caption("Marble Game")


# Define the font to use for text
font = pygame.font.SysFont(None, 30)


background_image = pygame.image.load("C:/Users/sathv/Downloads/WhatsApp Image 2023-03-09 at 20.05.56.jpeg")
screen.blit(background_image, (0, 0))

def bfs(s, e, n, holes, walls):
    d = [[[-1 for _ in range(n)] for _ in range(n)] for _ in range(len(s))]
    q = Queue()
    for i in range(len(s)):
        d[i][s[i][0]][s[i][1]] = 0
        q.put((i, s[i][0], s[i][1]))
    while not q.empty():
        i, r, c = q.get()
        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            nr, nc = r + dr, c + dc
            if 0 <= nr < n and 0 <= nc < n and d[i][nr][nc] == -1 and (nr, nc) not in walls:
                if (nr, nc) in holes and i == holes[(nr, nc)]:
                    d[i][nr][nc] = d[i][r][c]
                    q.put((i, nr, nc))
                else:
                    d[i][nr][nc] = d[i][r][c] + 1
                    q.put((i, nr, nc))
    total_moves = 0
    for i in range(len(s)):
        if d[i][e[i][0]][e[i][1]] == -1:
            return -1
        total_moves += d[i][e[i][0]][e[i][1]]
    return total_moves

def draw_grid(n, marbles, holes, walls):
    screen_width, screen_height = screen.get_size()
    grid_size = n * (cell_size + padding) + padding
    x = (screen_width - grid_size) // 2
    y = (screen_height - grid_size) // 2
    
    for row in range(n):
        for col in range(n):
            # Calculate the position and size of the cell
            cell_x = x + col * (cell_size + padding)
            cell_y = y + row * (cell_size + padding)
            rect = pygame.Rect(cell_x, cell_y, cell_size, cell_size)

            # Draw the cell
            pygame.draw.rect(screen, white, rect)

            # Draw the holes
            #if (row, col) in holes:
               # pygame.draw.line(screen, red, (cell_x, cell_y), (cell_x + cell_size, cell_y + cell_size), 5)
               # pygame.draw.line(screen, red, (cell_x + cell_size, cell_y), (cell_x, cell_y + cell_size), 5)
            if (row, col) in holes:
                pygame.draw.circle(screen, blue, rect.center, cell_size // 2, 0)

            # Draw the marbles
            if (row, col) in marbles:
                pygame.draw.circle(screen, blue, rect.center, cell_size // 2, 2)

            # Draw the walls
            if (row, col) in walls:
                wall_x = x + col * (cell_size + padding) + cell_size
                wall_y = y + row * (cell_size + padding)
                pygame.draw.line(screen, black, (wall_x, wall_y), (wall_x, wall_y + cell_size), 5)


    # Update the display
    pygame.display.flip()

# Draw the initial grid
draw_grid(n, marbles, holes, walls)

# Run the main game loop
while True:
    # Handle events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            quit()

    # Run the BFS algorithm to find the optimal number of moves
    moves = bfs(marbles, ends, n, holes, walls)

    # Display the number of moves on the screen
    text = font.render(" Minimum Moves: " + str(moves), True, black)
    screen.blit(text, (300, 465))

    # Update the display
    pygame.display.flip()
